{"version":3,"file":"window-view-layer-usage.component.js","sourceRoot":"","sources":["file:///C:/Users/yujuiting/Documents/projects/ng2-window-view/example/src/window-view-layer-usage/window-view-layer-usage.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAwC,eAAe,CAAC,CAAA;AACxD,iBAEuC,WAAW,CAAC,CAAA;AACnD,0CAAwC,6BAA6B,CAAC,CAAA;AAgBtE;IACE,uCAAoB,UAA6B;QAA7B,eAAU,GAAV,UAAU,CAAmB;IAAG,CAAC;IAErD,kDAAU,GAAV;QAAA,iBAUC;QATC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,mDAAuB,CAAC;aAChD,IAAI,CAAC,UAAC,YAAmD;YACxD,IAAI,UAAU,GAA4B,KAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,KAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAC1G,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;gBACf,IAAI,QAAQ,GAA6B,UAAU,CAAC,QAAQ,CAAA;gBAC5D,QAAQ,CAAC,CAAC,IAAI,GAAG,CAAC;gBAClB,YAAY,CAAC,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC;YAC5C,CAAC;QACH,CAAC,CAAC,CAAC;IACP,CAAC;IA3BH;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,QAAQ,EAAE,yBAAyB;YACnC,WAAW,EAAE,wCAAwC;YACrD,UAAU,EAAE,CAAC,4BAAyB,CAAC;YACvC,SAAS,EAAE;gBACT,oBAAiB;gBACjB;;;mBAGG;gBACH,yBAAsB;aACvB;SACF,CAAC;;qCAAA;IAeF,oCAAC;AAAD,CAAC,AAdD,IAcC;AAdY,qCAA6B,gCAczC,CAAA","sourcesContent":["import { Component, ComponentRef } from '@angular/core';\r\nimport { WindowViewOutletComponent,\r\n         WindowViewService,\r\n         WindowViewLayerService } from '../../../';\r\nimport { FloatingWindowComponent } from './floating-window.component';\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'window-view-layer-usage',\r\n  templateUrl: 'window-view-layer-usage.component.html',\r\n  directives: [WindowViewOutletComponent],\r\n  providers: [\r\n    WindowViewService,\r\n    /**\r\n     * If you provide this service, A `WindowViewContainer` with enabled `floating`\r\n     * will be bring to top layer if being click.\r\n     */\r\n    WindowViewLayerService\r\n  ]\r\n})\r\nexport class WindowViewLayerUsageComponent {\r\n  constructor(private windowView: WindowViewService) {}\r\n  \r\n  openWindow() {\r\n    this.windowView.pushWindow(FloatingWindowComponent)\r\n      .then((componentRef: ComponentRef<FloatingWindowComponent>) => {\r\n        let lastWindow: FloatingWindowComponent = this.windowView.getWindowInstanceAt(this.windowView.length - 2);\r\n        if (lastWindow) {\r\n          let position: { x: number, y: number } = lastWindow.position\r\n          position.x += 400;\r\n          componentRef.instance.position = position;\r\n        }\r\n      });\r\n  }\r\n}"]}