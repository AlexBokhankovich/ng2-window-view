{"version":3,"file":"window-view.service.js","sourceRoot":"","sources":["file:///D:/projects/ng2-window-view/src/lib/window-view.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAE2C,eAAe,CAAC,CAAA;AAC3D,wBAAwB,cAAc,CAAC,CAAA;AAUvC;IAkBE,2BAAoB,GAA2B;QAA3B,QAAG,GAAH,GAAG,CAAwB;QAhBvC,UAAK,GAAiB,EAAE,CAAC;QAIzB,aAAQ,GAAoB,IAAI,iBAAO,EAAU,CAAC;QAElD,aAAQ,GAA+B,IAAI,iBAAO,EAAqB,CAAC;QAExE,cAAS,GAA+B,IAAI,iBAAO,EAAqB,CAAC;IAQ/B,CAAC;IANnD,sBAAI,sCAAO;aAAX,cAAoC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;;;OAAA;IAE1E,sBAAI,sCAAO;aAAX,cAA+C,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;;;OAAA;IAErF,sBAAI,uCAAQ;aAAZ,cAAgD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;;;OAAA;IAIvF,qCAAS,GAAT,UAAU,MAAwB;QAChC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED,sCAAU,GAAV,UAAW,SAAe,EAAE,SAA4C;QAAxE,iBASC;QAT2B,yBAA4C,GAA5C,cAA4C;QACtE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,kBAAkB,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC;aAClE,IAAI,CAAC,UAAC,YAA+B;YACpC,IAAI,UAAU,GAAe,EAAE,WAAA,SAAS,EAAE,cAAA,YAAY,EAAE,CAAC;YACzD,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC5B,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YACjC,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YACtC,MAAM,CAAC,YAAY,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAED,qCAAS,GAAT;QACE,IAAI,UAAU,GAAe,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;QAC9C,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;QAC7C,UAAU,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;QAClC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IACxC,CAAC;IAzCH;QAAC,iBAAU,EAAE;;yBAAA;IA2Cb,wBAAC;AAAD,CAAC,AA1CD,IA0CC;AA1CY,yBAAiB,oBA0C7B,CAAA","sourcesContent":["import { Injectable, Type, Injector,\r\n         DynamicComponentLoader, ViewContainerRef, ComponentRef,\r\n         ResolvedReflectiveProvider } from '@angular/core';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\n\r\ninterface WindowView {\r\n  Component: Type;\r\n  componentRef: ComponentRef<any>;\r\n}\r\n\r\n@Injectable()\r\nexport class WindowViewService {\r\n\r\n  private stack: WindowView[] = [];\r\n\r\n  private outlet: ViewContainerRef;\r\n\r\n  private _length$: Subject<number> = new Subject<number>();\r\n\r\n  private _onOpen$: Subject<ComponentRef<any>> = new Subject<ComponentRef<any>>();\r\n\r\n  private _onClose$: Subject<ComponentRef<any>> = new Subject<ComponentRef<any>>();\r\n\r\n  get length$(): Observable<number> { return this._length$.asObservable(); }\r\n\r\n  get onOpen$(): Observable<ComponentRef<any>> { return this._onOpen$.asObservable(); }\r\n\r\n  get onClose$(): Observable<ComponentRef<any>> { return this._onClose$.asObservable(); }\r\n\r\n  constructor(private dcl: DynamicComponentLoader) {}\r\n\r\n  setOutlet(outlet: ViewContainerRef) {\r\n    this.outlet = outlet;\r\n  }\r\n\r\n  pushWindow(Component: Type, providers: ResolvedReflectiveProvider[] = []): Promise<ComponentRef<any>> {\r\n    return this.dcl.loadNextToLocation(Component, this.outlet, providers)\r\n      .then((componentRef: ComponentRef<any>) => {\r\n        let windowView: WindowView = { Component, componentRef };\r\n        this.stack.push(windowView);\r\n        this._onOpen$.next(componentRef);\r\n        this._length$.next(this.stack.length);\r\n        return componentRef;\r\n      });\r\n  }\r\n\r\n  popWindow() {\r\n    let windowView: WindowView = this.stack.pop();\r\n    this._onClose$.next(windowView.componentRef);\r\n    windowView.componentRef.destroy();\r\n    this._length$.next(this.stack.length);\r\n  }\r\n\r\n}\r\n"]}