{"version":3,"file":"window-view.service.js","sourceRoot":"","sources":["file:///C:/Users/yujuiting/Documents/projects/ng2-window-view/src/lib/window-view.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Type, Injector,\r\n         DynamicComponentLoader, ViewContainerRef, ComponentRef,\r\n         ResolvedReflectiveProvider } from '@angular/core';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { WindowViewCanClose } from './window-view-can-close';\r\nimport { WindowViewHasResult } from './window-view-has-result';\r\n\r\n@Injectable()\r\nexport class WindowViewService {\r\n\r\n  private stack: ComponentRef<any>[] = [];\r\n\r\n  private outlet: ViewContainerRef;\r\n\r\n  private _length$: Subject<number> = new Subject<number>();\r\n\r\n  private _onOpen$: Subject<ComponentRef<any>> = new Subject<ComponentRef<any>>();\r\n\r\n  private _onClose$: Subject<ComponentRef<any>> = new Subject<ComponentRef<any>>();\r\n\r\n  get length(): number { return this.stack.length; }\r\n\r\n  /**\r\n   * Current window's count.\r\n   */\r\n  get length$(): Observable<number> { return this._length$.asObservable(); }\r\n\r\n  /**\r\n   * Emit after window open.\r\n   */\r\n  get onOpen$(): Observable<ComponentRef<any>> { return this._onOpen$.asObservable(); }\r\n\r\n  /**\r\n   * Emit before window close.\r\n   */\r\n  get onClose$(): Observable<ComponentRef<any>> { return this._onClose$.asObservable(); }\r\n\r\n  constructor(private dcl: DynamicComponentLoader) {}\r\n\r\n  setOutlet(outlet: ViewContainerRef) {\r\n    this.outlet = outlet;\r\n  }\r\n\r\n  getWindowInstanceAt(index: number) {\r\n    return (this.stack[index]) ? this.stack[index].instance : null;\r\n  }\r\n\r\n  /**\r\n   * Add window to top.\r\n   */\r\n  pushWindow(Component: Type, providers: ResolvedReflectiveProvider[] = []): Promise<ComponentRef<any>> {\r\n    if (!this.outlet) {\r\n      throw new Error('[WindowViewService] pushWindow error. Not found window-view-outlet');\r\n    }\r\n    return this.dcl.loadNextToLocation(Component, this.outlet, providers)\r\n      .then((componentRef: ComponentRef<any>) => {\r\n        this.stack.push(componentRef);\r\n        this._onOpen$.next(componentRef);\r\n        this._length$.next(this.stack.length);\r\n        return componentRef;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Open window and wait for result.\r\n   */\r\n  pushWindowAndGetResult<T>(Component: WindowViewHasResult<T>, providers: ResolvedReflectiveProvider[] = []): Promise<Observable<T>> {\r\n    return this.pushWindow(Component as any, providers).then((componentRef: ComponentRef<WindowViewHasResult<T>>) => {\r\n      let component: WindowViewHasResult<T> = componentRef.instance;\r\n      if (!component.preventAutoCloseWindow) {\r\n        let waitForResult: Subscription = component.result$.subscribe(null, null, () => {\r\n          this.popWindow();\r\n          waitForResult.unsubscribe();\r\n        });\r\n      }\r\n      return component.result$;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Remove latest window.\r\n   */\r\n  popWindow(): boolean {\r\n    if (this.stack.length === 0) {\r\n      return false;\r\n    }\r\n    let componentRef: ComponentRef<any> = this.stack[this.stack.length - 1];\r\n    return this.removeWindow(componentRef);\r\n  }\r\n\r\n  removeWindow(componentRef: ComponentRef<any>): boolean {\r\n    if (!this.canCloseWindowView(componentRef)) {\r\n      return false;\r\n    }\r\n    let index: number = this.stack.indexOf(componentRef);\r\n    this.stack.splice(index, 1);\r\n    this._onClose$.next(componentRef);\r\n    this._length$.next(this.stack.length);\r\n    componentRef.destroy();\r\n    return true;\r\n  }\r\n\r\n  removeWindowByInstance(instance: any) {\r\n    let componentRef: ComponentRef<any> = this.stack.find((componentRef: ComponentRef<any>) =>\r\n      componentRef.instance == instance);\r\n    return this.removeWindow(componentRef);\r\n  }\r\n\r\n  private canCloseWindowView(componentRef: ComponentRef<WindowViewCanClose>) {\r\n    if (typeof componentRef.instance.windowViewCanClose != 'function') {\r\n      return true;\r\n    }\r\n    return componentRef.instance.windowViewCanClose();\r\n  }\r\n\r\n}\r\n"]}