{"version":3,"file":"window-view-container.component.js","sourceRoot":"","sources":["file:///D:/projects/ng2-window-view/src/lib/window-view-container/window-view-container.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAuD,eAAe,CAAC,CAAA;AACvE,oCAAkC,wBAAwB,CAAC,CAAA;AAO3D;IAEE,sCAAoB,UAA6B;QAA7B,eAAU,GAAV,UAAU,CAAmB;QAGjD,YAAO,GAAW,iBAAiB,CAAC;QAGpC,SAAI,GAAW,GAAG,CAAC;QAGnB,aAAQ,GAAe,cAAQ,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IATM,CAAC;IAWrD,sBAAI,mDAAS;aAAb;YACE,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;gBAChC,KAAK,GAAG,CAAC;gBACT,KAAK,OAAO,EAAE,MAAM,CAAC,YAAY,CAAC;gBAClC,KAAK,GAAG,CAAC;gBACT,KAAK,QAAQ,EAAE,MAAM,CAAC,aAAa,CAAC;gBACpC,KAAK,GAAG,CAAC;gBACT,KAAK,OAAO,EAAE,MAAM,CAAC,YAAY,CAAC;gBAClC,KAAK,IAAI,CAAC;gBACV,KAAK,gBAAgB,EAAE,MAAM,CAAC,qBAAqB,CAAC;gBACpD,KAAK,IAAI,CAAC;gBACV,KAAK,iBAAiB,EAAE,MAAM,CAAC,sBAAsB,CAAC;gBACtD,KAAK,IAAI,CAAC;gBACV,KAAK,gBAAgB,EAAE,MAAM,CAAC,qBAAqB,CAAC;YACtD,CAAC;QACH,CAAC;;;OAAA;IAED,sDAAe,GAAf,UAAgB,MAAkB;QAChC,EAAE,CAAC,CAAC,MAAM,CAAC,aAAa,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;YAC1C,IAAI,CAAC,KAAK,EAAE,CAAC;QACf,CAAC;IACH,CAAC;IAED,4CAAK,GAAL;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC;QAC9B,CAAC;IACH,CAAC;IApCD;QAAC,YAAK,EAAE;;iEAAA;IAGR;QAAC,YAAK,EAAE;;8DAAA;IAGR;QAAC,YAAK,EAAE;;kEAAA;IAfV;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,uBAAuB;YACjC,WAAW,EAAE,4DAA4D;YACzE,SAAS,EAAE,CAAC,2DAA2D,CAAC;SACzE,CAAC;;oCAAA;IA2CF,mCAAC;AAAD,CAAC,AA1CD,IA0CC;AA1CY,oCAA4B,+BA0CxC,CAAA","sourcesContent":["import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { WindowViewService } from '../window-view.service';\r\n\r\n@Component({\r\n  selector: 'window-view-container',\r\n  templateUrl: 'window-view-container/window-view-container.component.html',\r\n  styleUrls: ['window-view-container/window-view-container.component.css']\r\n})\r\nexport class WindowViewContainerComponent {\r\n\r\n  constructor(private windowView: WindowViewService) {}\r\n  \r\n  @Input()\r\n  heading: string = 'Untitled Window';\r\n\r\n  @Input()\r\n  size: string = 'M';\r\n\r\n  @Input()\r\n  canClose: () => void = () => { return true; };\r\n\r\n  get sizeClass(): string {\r\n    switch (this.size.toLowerCase()) {\r\n      case 's':\r\n      case 'small': return 'size-small';\r\n      case 'm':\r\n      case 'middle': return 'size-middle';\r\n      case 'l':\r\n      case 'large': return 'size-large';\r\n      case 'rs':\r\n      case 'relative-small': return 'size-relative-small';\r\n      case 'rm':\r\n      case 'relative-middle': return 'size-relative-middle';\r\n      case 'rl':\r\n      case 'relative-large': return 'size-relative-large';\r\n    }\r\n  }\r\n  \r\n  clickBackground($event: MouseEvent) {\r\n    if ($event.currentTarget == $event.target) {\r\n      this.close();\r\n    }\r\n  }\r\n\r\n  close() {\r\n    if (this.canClose()) {\r\n      this.windowView.popWindow();\r\n    }\r\n  }\r\n\r\n}\r\n"]}